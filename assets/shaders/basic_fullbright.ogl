
Full Bright Shader
------------------
A general purpose shader with no lighting calculations.


[VERTEX]

#version 150 core

// Vertex Format
in vec3 inPosition;
in vec2 inTexC;
in vec3 inNormal;

// WVP matrix.
uniform mat4 worldMat;
uniform mat4 viewMat;
uniform mat4 projMat;

// Texture settings
uniform vec2 texScale  = vec2(1, 1);
uniform vec2 texOffset = vec2(0, 0);

// Other settings
uniform vec3 vertScale = vec3(1, 1, 1);
uniform vec4 color	   = vec4(1, 1, 1, 0);

// Output Format
out vec2 frag_tex_coords;

void main()
{
// Position vert
mat4 wvpMat = projMat * viewMat * worldMat;
vec3 position = vec3(inPosition.x * vertScale.x, inPosition.y * vertScale.y, inPosition.z * vertScale.z);

gl_Position = wvpMat * vec4(position, 1.0);

// Update tex coords with given info.
float u = (inTexC.x * texScale.x) + texOffset.x;
float v = (inTexC.y * texScale.y) + texOffset.y;
frag_tex_coords = vec2(u, v);
}

[/VERTEX]


[PIXEL]

#version 150

in vec2 frag_tex_coords;

uniform sampler2D mip01;
uniform sampler2D mip02;

out vec4 frag_out_color;

void main()
{
  vec4 tex_color;
  int mips = 2;

  if(frag_tex_coords.x < 0.5 && frag_tex_coords.y < 0.5)
  {
    vec2 uv_adjusted = vec2(frag_tex_coords.x * 2, frag_tex_coords.y * 2);
    tex_color = texture(mip02, uv_adjusted);
  }
  else
  {
    tex_color = texture(mip01, frag_tex_coords);
  }


  frag_out_color = tex_color;
}

[/PIXEL]
